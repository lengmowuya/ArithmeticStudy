// 需求:给入两个值,返回一个在两数之间的随机整数,包括两数.
// 可能的情况1:传入的两个数都是负数,或一个数是整数,一个数是负数
// 可能的情况2:传入的第一个数比第二数大.
function randomInt(min,max){
    return Math.floor(Math.random()*(max+1-min)+min);
}
console.log(randomInt(0,3));    // 没问题
console.log(randomInt(-3,-1));  // 没问题
console.log(randomInt(5,-9));   // 没问题

// Math.floor是为了把数向下取整
// Math.random() * 数 是为了把小数扩大成整数,因为Math.random默认返回的是0-1之间(包括0,不包括1)的小数.

// Math.random() * 10 并向下取整后就是 0 - 10之间(不包括10)的随机数.所以乘以x就可以得到0到x直接的随机数.
// 但是一般业务中,我们传入指定范围,一般都是包括范围边界的,所以我们乘以 x+1来得到0~x之间的随机数,包括x;
// 我把这个行为叫做扩张.

// 而扩张后的 + min,是为了改变起始范围,得到0-10范围之间的随机数后再加上5自然就只可能在5~15之间. 而加的是负数(如-5)也可以将起始范围变成负数:-5~5之间. 问题是目标范围也被随之改变了,解决方式就是在横移钱就缩小扩张,以保证取值范围的覆盖.
// 0~10 加 5 变成 5~15,那么我原先就只扩张到5,那么横移后就变回目标的范围. 0~5 加 5 变成 5~10,所以扩张前应该预先减去会横移的范围.